package controller;

import model.DataModel;
import util.DatabaseConnection;
import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public abstract class BaseController<T> {
    protected final DataModel<T> model;
    protected final List<Runnable> refreshListeners = new ArrayList<>();

    public BaseController(Class<T> type) {
        this.model = new DataModel<>(type);
    }

    public DataModel<T> getModel() {
        return model;
    }

    public void addRefreshListener(Runnable listener) {
        refreshListeners.add(listener);
    }

    protected void notifyRefreshListeners() {
        refreshListeners.forEach(Runnable::run);
    }


    protected <R> R executeQuery(String sql, ResultSetHandler<R> handler, Object... params) {
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            setParameters(pstmt, params);
            try (ResultSet rs = pstmt.executeQuery()) {
                return handler.handle(rs);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    
    protected <R> R executeQuery(String sql, ResultSetHandler<R> handler, int autoGeneratedKeys, Object[] params) {
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql, autoGeneratedKeys)) {

            setParameters(pstmt, params);
            pstmt.executeUpdate();
            try (ResultSet rs = pstmt.getGeneratedKeys()) {
                return handler.handle(rs);
            }
        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
    }

    protected boolean executeUpdate(String sql, Object... params) {
        try (Connection conn = DatabaseConnection.getConnection();
             PreparedStatement pstmt = conn.prepareStatement(sql)) {

            setParameters(pstmt, params);
            return pstmt.executeUpdate() > 0;
        } catch (SQLException e) {
            e.printStackTrace();
            return false;
        }
    }

    private void setParameters(PreparedStatement pstmt, Object... params) throws SQLException {
        for (int i = 0; i < params.length; i++) {
            pstmt.setObject(i + 1, params[i]);
        }
    }

    @FunctionalInterface
    public interface ResultSetHandler<R> {
        R handle(ResultSet rs) throws SQLException;
    }
}